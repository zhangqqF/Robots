clc;clear;close;

% rigidBodyTree创建机器人
robot = rigidBodyTree('DataFormat','column','MaxNumBodies',3);

% 连杆长
L1 = 0.3;
L2 = 0.3;



% ---------------- 添加连杆 ---------------- %
% rigidBody创建连杆
body = rigidBody('base');
% rigidBodyJoint创建关节
joint = rigidBodyJoint('joint0', 'revolute');
% setFixedTransform关节位置
setFixedTransform(joint,trvec2tform([0 0 0]));
% 定义旋转轴
joint.JointAxis = [0 0 1];
body.Joint = joint;
addBody(robot, body, 'base');


body = rigidBody('link1');
joint = rigidBodyJoint('joint1','revolute');
setFixedTransform(joint, trvec2tform([L1,0,0]));
joint.JointAxis = [0 0 1];
body.Joint = joint;
addBody(robot, body, 'base');


body = rigidBody('link2');
joint = rigidBodyJoint('fix1','fixed');
setFixedTransform(joint, trvec2tform([L2, 0, 0]));
body.Joint = joint;
addBody(robot, body, 'link2');
% ---------------------------------------- %
showdetails(robot)


% Define the trajector
t = (0:0.2:10)'; % Time
count = length(t);
center = [0.3 0.1 0];
radius = 0.15;
theta = t*(2*pi/t(end));
points = center + radius*[cos(theta) sin(theta) zeros(size(theta))];




q0 = homeConfiguration(robot)
ndof = length(q0)
qs = zeros(count, ndof);


ik = inverseKinematics('RigidBodyTree', robot);
weights = [0, 0, 0, 1, 1, 0];
endEffector = 'tool';


qInitial = q0;
for i = 1:count
    point = points(i,:);
    qSol = ik(endEffector,trvec2tform(point),weights,qInitial);
    qs(i,:) = qSol;
    qInitial = qSol;
end



figure
show(robot,qs(1,:)');
view(2)
ax = gca;
ax.Projection = 'orthographic';
hold on
plot(points(:,1),points(:,2),'k')
axis([-0.1 0.7 -0.3 0.5])



framesPerSecond = 15;
r = rateControl(framesPerSecond);
for i = 1:count
    show(robot,qs(i,:)','PreservePlot',false);
    drawnow
    waitfor(r);
end




